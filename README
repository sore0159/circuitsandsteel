
     ================  CIRCUITS AND STEEL  ================
     Humans Rule                       Ridgeview Elementary
     0                     ==VERSUS==                     0
                                                           
                                                           
                                                           
     @/          @/                      \@             \@ 
     XX XX ^^ ^^ XX XX ^^ ^^ XX XX ^^ ^^ XX XX ^^ ^^ XX XX 
        f1 f2 f3 f4 f5 f6 f7 f8 f9       12             17 
     ------------------------------------------------------
     Discard Pile: 1x0 2x0 3x0 4x1 5x1
     Turn Order: RO, LI, >P1<, RO             28 Cards Left
     P1:5 2 4 4 1                              5 4 4 1 5:RO
     RO:3 4 3 4 1                              3 3 5 2 1:LI
     Game Start, Two Vs Two
     Turn Order Set: Roomba, Little Bobby Tables, Player One, Robot Chicken
     f4:Roomba moved to a dark square numbered 5
     f5:Little Bobby Tables moved to a dark square numbered 13
     Player One's Options:
     ['b1', 'b2', 'b4', 'b5', 'f1', 'f2', 'f4', 'f5']
     

===================  CIRCUITS AND STEEL  ==================
Python2.7 implimentation of the board game Flash Duel/En Garde
Usage:
python run.py robots [NUM NUM]
python run.py create [gNUM] [robotname, ...] [vs] [robotname, ...]
python run.py list
python run.py [gNUM[pNUM]] [CHOICE]

    Leading with the 'robots' arg will create a game with a random gameid and random robots.  If two numbers follow the game will attempt to make a game with those sized factions, defauting to 2v2.  The robots will then fight, with each decision point printed out and a data/gNUM_archive.pkl file created for the game.
    Leading with the 'create' arg will create a game either the following game id or a random gameid if none is specified.  If any robot names follow, they will be used as the players for the game.  If a 'vs' tag exists then the robots will be separated into the given teams.  Possible game types are 1v1 2v2 2v1 3v1 and 4v1.
    Any malformed names will be dropped: 'human' will be used to fill in any lists that end up to short.

Examples:
python run.py create human LittleBobby
python run.py create g505 BadRobot Roomba vs LittleBobby

    Using the 'list' arg will list all available robot names.  LittleBobby is really the only robot focused on the game at the moment.  All the others will at least not pick 'dumb' options that do nothing or throw the game (except for BadRobot.  He's terrible). human as a robot name will query user for the player's decisions.
    Finally, without these keywords the game will check for a game ID arg, defaulting to 0 if none is found.  If one is found it will check for a player ID, if found it will present the game from that player's veiw.  If the player ID is 'pm' then the master veiw will be displayed.  Lastly it will check for an option input to pass to the game if it is waiting for a human decision.
Examples:
python run.py g10p12 d522
python run.py g302
python run.py g23pm a33
python run.py g58p3
-------------------------------------------------------------------------
view_archives.py will view the archive files created by playing the game.
Usage:
./view_archives.py data/PKLFILE.pkl

view_archives.py will let you browse through the snapshots archived in the selected pklfile, starting with the last.  Runtime options include navigating through the snapshots, changing the view from an (a)scii printout of the game to the (d)ata represented openly.  

Finally you may (i)solate a particular snapshot into its own file, isolate.pkl, which is created/overwritten in the working directory.  You can rename isolate.pkl to gNUM_archive.pkl and put it in the data directory to make it available for play starting at that point.

Currents ASCII Legend:
 @/    Nomal characters    \@
 @     Winded characters    @
 !/    Under attack        \!
 @/?   Asked for help      \@?
 XX    Dark spaces         XX
 ^^    Light spaces        ^^
 f3    Forward/Backward    b4
 04    Distance to enemy   12

--------------------------------------------------------------------------
Split across several files for readability/editability, not for any functional reason.  This is a pretty amateur project, you may notice that.

1v1, 2v2, 2,3,4 vs 1 (Simple Dragon) working. 
No Powers for anyone at present.
First AI opponent, Little Bobby Tables, is operational!
More AI opponents working, but not really up to speed.
More robust AI to come
Web interface to come
Powers much farther off

Stay tuned for......

   /  \__/  \__/  \__/  \__/  \__/  \__/  \__/  \_
   \__/  \__/  \__/  \__/  \__/  \__/  \__/  \__/  
   /  \__/  \__/  \__/  \__/  \__/  \__/  \__/  \_
   ==============MOBILE_FRAME_ZERO================
   /  \__/  \__/  \__/===HEX===__/  \__/  \__/  \_
   \__/  \__/  \__/  \__/  \__/  \__/  \__/  \__/  
   /  \__/  \__/  \__/  \__/  \__/  \__/  \__/  \_
   \__/  \__/  \__/  \__/  \__/  \__/  \__/  \__/  


